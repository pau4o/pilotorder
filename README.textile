h1. PilotOrder

This section holds preparation tasks for PilotOrder application

h2. Creating Models

Create models based on Pilotage application

- Agent
  r g nifty:scaffold agent name:string contacts:text status:string editor_id:integer

    status: default => active

- AssesmentCard
  r g model AssesmentCard card_id:integer driver:boolean comment:text editor_id:integer

  driver: default => false 

- AuthLog
  r g nifty:scaffold Admin::AuthLog username:string fullname:string --haml

  entrytime can be replaced by created_at!

- ControlTable - TODO: check for what is this table

- CountryCodes
  r g nifty:scaffold name:string alpha2:string alpha3:string num_code:integer

  alpha2: limit => 2
  alpha3: limit => 3

  FIXMME: this is replaced by flags

- Criteria
  r g nifty:scaffold Admin::Criteria name:string alert:boolean number:integer editor_id:integer --haml

  alert: default => false
  entrytime => created_at


- Instruction
  r g nifty:scaffold Admin::Instruction effective:timestamp subject:string body:text due:timestamp canceled:boolean cancelation:timestamp --haml

  has_many executives

  effective: default => Now()
  issued => created_at
  TODO: check what to use cancelation and canceled attribute ?

- Executive  - hold information about readed Instructions
  r g nifty:scaffold executive instruction_id:integer user_id:integer pending:boolean accessed:timestamp

  pending: default => true
  accessed => updated_at ?

  belongs_to users
  belongs_to instructions

  All new instructions must create record in Executives for each user with role DISPATCHER, pending => true

- Ship
  r g nifty:scaffold ship imonumber:string name:string callsign:string flag:string owner:string gt:integer loa:decimal boa:decimal draftfwd:decimal aft:decimal airdraft:decimal propelers:integer proptype:boolean trusters:integer editor_id:integer --haml

  callsign :limit => 20
  name :limit => 64
  flag :limit => 32
  imonumber :limit => 16

  TODO: get all decimal attributes from Vessel model

- LogBook
  r g nifty:scaffold log_book 

  has_one :ship_data

- ShipData
  r g model ship_data imonumber:string name:string callsign:string flag:string owner:string gt:integer loa:decimal boa:decimal draftfwd:decimal aft:decimal airdraft:decimal propelers:integer proptype:boolean trusters:integer editor_id:integer log_book_id:integer 

  belongs_to :log_book
  
  ShipData have the same clumns as Ship with one extra field => logbook_id

- Forthcoming Manoeuvres 
  r g model ForthMan 

  have almost same information as Ship model and 13 extra attributes

- Areas
  r g nifty:scaffold area name:string data:string editable:boolean faraway:boolean mapname:string scale_ppm:float iconname:string editor_id:integer

  has_many :places

- Places
  r g nifty:scaffold Admin::Place name:string mooring:boolean data:string imonumber:string ship_id:integer log_book_id:integer arrival:timestamp leftanchor:boolean la_keys:integer rightanchor:boolean ra_keys:integer board:boolean x_center:integer y_center:integer bearing:integer editor_id:integer --haml

  imonumber :limit => 16
  la_keys :default => 0
  ra_keys :default => 0
  belongs_to :ship
  belongs_to :log_book
  belongs_to :user, :foreign_key => :editor_id

- Users
  r g nifty:scaffold 

  FIXME: use devise ?

- Tugs
  r g nifty:scaffold Admin::Tug name:string editor_id:integer

  belongs_to :user, :foreign_key => :editor_id

h1. BaseApp2

h2. Requirements

Rails 3.0.9

h2. Features

- Layout
- Tabs
- Global links
- Optional sidebar
- Notice, warning and error flash messages
- Both a default stylesheet as well as a ‘clean’ one are included for easy layout development.
- Default dashboard page
- Administration panel where you can:
  Manage users (add, delete, purge, suspend, activate, send new passwords)
- Manage settings
- Manage site wide timed announcements
- Post-Commit Hooks ready to roll for Campfire, Basecamp, FriendFeed, Twitter and custom URL.
- User authentication, with password recovery and login recovery and account activation (by email)
- User Profiles:
  Location, Website, Full name fields by default, easily extendible.
  Gravatar for avatar support
- Mobile Ready
- Auto detect mobile users/visitors and display different views.
- Based on the JQTouch framework, making it easy to theme.
- Devise 
- Declarative Authorization

h2. Configatron vs. Settings

Previously, site settings were stored in the database. Now, you have two options for storing configuration settings.

1. Configatron config/config.yml

All default configuration options that are not ‘user changeable’ should go in config/config.yml. This uses the Configatron gem (frozen in vendor/gems).

To retrieve the site name you may use ‘configatron.site_name’ everywhere in your code.

2. Settings in database

It’s still possible to store user changeable settings in the database model Setting.

Note: As long as there are no Settings in the database, the ‘Settings’ tab for the administrator is hidden. Once you add a Setting to the database through a migration (or otherwise), the Settings tab will show up.

h2. FastGettext configuration

editor Gemfile
gem 'gettext_i18n_rails'


editor config/initializers/fast_gettext.rb
FastGettext.add_text_domain 'pilotage', :path => 'locale', :type => :po
FastGettext.default_available_locales = ['en','bg'] #all you want to allow
FastGettext.default_text_domain = 'pilotage'

editor app/controllers/application_controller.rb
class ApplicationController < ...
  before_filter :set_gettext_locale

mkdir locale

generate pot
rake gettext:find

h2. Getting Started

1. At the command prompt:
     * bundle install
     * rake db:migrate
     * rails s

2. Go to http://localhost:3000/

3. Administration username and password are as follows:
     * admin
     * baseapp
